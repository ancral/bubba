diff -ru a/Dispatcher.cpp b/Dispatcher.cpp
--- a/Dispatcher.cpp	2010-06-09 15:24:27.000000000 +0200
+++ b/Dispatcher.cpp	2015-11-07 16:33:12.658470768 +0100
@@ -332,18 +332,21 @@
 				// "Deactivate" old interface
 				InterfaceController::Instance().SetRawCfg(olf,Json::Value(Json::objectValue));
 				InterfaceController::Down(olf);
-				// Pick up new if
-				InterfaceController::Up(newif);
 
 				// If this was a move from two wlan (bridge) update rc.d
 				if(newiftype=="bridge"){
+					system("ln -s net.lo /etc/init.d/net.br0");
 					list<int> start,stop;
 					start.push_back(2);
-					Services::Enable("ifup-br0",19,start,0,stop);
+					Services::Enable("net.br0",19,start,0,stop);
 				}else{
-					Services::Disable("ifup-br0");
+					Services::Disable("net.br0");
+					system("rm /etc/init.d/net.br0");
 				}
 
+				// Pick up new if
+				InterfaceController::Up(newif);
+
 			}
 		}catch(runtime_error& err){
 			res["status"]=false;
diff -ru a/utils/InterfacesCfg.cpp b/utils/InterfacesCfg.cpp
--- a/utils/InterfacesCfg.cpp	2010-06-09 15:24:26.000000000 +0200
+++ b/utils/InterfacesCfg.cpp	2015-11-07 16:32:53.326841763 +0100
@@ -22,6 +22,8 @@
     $Id$
 */
 
+#include <arpa/inet.h>
+#include <string>
 #include <iostream>
 #include <sstream>
 using namespace std;
@@ -47,29 +49,82 @@
 void InterfacesCfg::parse_cfg(){
 	list<string> fil=FileUtils::GetContent(IFSFILE);
 	string curif;
+	bool inarg=false;
+	bool isroute=false;
+	bool isbridge=false;
+
 	for(list<string>::iterator fIt=fil.begin();fIt!=fil.end();fIt++){
 		string line=StringTools::Trimmed(*fIt," \t");
 		if(line=="" or line[0]=='#'){
 			continue;
 		}
-		list<string> words=StringTools::Split(*fIt,"[ \t]");
-		if(words.size()>1){
-			if(words.front()=="auto"){
-				curif=words.back();
-				this->cfg[curif]["auto"]=true;
-			}else if(words.front()=="iface"){
-				words.pop_front();
-				curif=words.front();
-				this->cfg[curif]["addressing"]=words.back();
-			}else{
-				string key=words.front();
+		string arguments=line;
+		if(line.substr(0,7)=="config_"){
+			size_t argsep=line.find_first_of("=");
+			curif=line.substr(7,(argsep-7));
+			arguments=line.substr(argsep+1);
+		}
+		if(line.substr(0,7)=="routes_"){
+			size_t argsep=line.find_first_of("=");
+			curif=line.substr(7,(argsep-7));
+			arguments=line.substr(argsep+1);
+			isroute=true;
+		}
+		if(line.substr(0,7)=="bridge_"){
+			size_t argsep=line.find_first_of("=");
+			curif=line.substr(7,(argsep-7));
+			arguments=line.substr(argsep+1);
+			isbridge=true;
+		}
+		if (arguments=="" or curif.substr(0,3)=="ppp"){
+			continue;
+		}
+		if (arguments.substr(0,1)=="\""){
+			inarg=!inarg;
+			arguments=arguments.substr(1);
+		}
+		if (inarg) {
+			if (arguments.substr(arguments.size()-1,1)=="\""){
+				inarg=!inarg;
+				arguments.resize(arguments.size()-1);
+			}
+			list<string> words=StringTools::Split(arguments,"[ \t]");
+			if(words.front()=="dhcp"){
+				this->cfg[curif]["addressing"]="dhcp";
+
+			} else if(words.front()=="null"){
+				this->cfg[curif]["addressing"]="static";
+				this->cfg[curif]["options"]["address"].append("0.0.0.0");
+				this->cfg[curif]["options"]["netmask"].append("0.0.0.0");
+			} else if(words.front()=="default"){
+				this->cfg[curif]["options"]["gateway"].append(words.back());
+			} else if(isroute){
+				this->cfg[curif]["options"]["routes"].append(arguments);
+			} else if(isbridge){
+				while (!words.empty()){
+					this->cfg[curif]["options"]["bridge_ports"].append(words.front());
+					words.pop_front();
+				}
+ 			}else{
+				this->cfg[curif]["addressing"]="static";
+				this->cfg[curif]["options"]["address"].append(words.front());
 				words.pop_front();
-				for(list<string>::iterator sIt=words.begin();sIt!=words.end();sIt++){
-					this->cfg[curif]["options"][key].append(*sIt);
+				while (!words.empty()){
+					string key=words.front();
+					words.pop_front();
+ 					this->cfg[curif]["options"][key].append(words.front());
+					words.pop_front();
 				}
 			}
 		}
+		if (!inarg) {
+			curif="";
+			isroute=false;
+			isbridge=false;
+		}
+
 	}
+
 }
 
 Json::Value InterfacesCfg::GetCFG(){
@@ -82,32 +137,195 @@
 }
 
 bool InterfacesCfg::Commit(){
-
-	Json::Value::Members mem=this->cfg.getMemberNames();
+	Json::Value devs=this->cfg;
+	list<string> fil=FileUtils::GetContent(IFSFILE);
+	string curif="";
+	bool inarg=false;
+	bool isroute=false;
+	bool isbridge=false;
+	bool isbrctl=false;
 	stringstream ss;
 	list<string> res;
-	for(Json::Value::Members::iterator mIt=mem.begin();mIt!=mem.end();mIt++){
-		Json::Value val=this->cfg[*mIt];
-		if(val.isMember("auto")){
-			res.push_back("auto "+*mIt+"\n");
-		}
-		res.push_back("iface "+*mIt+" inet "+val["addressing"].asString()+"\n");
-
-		Json::Value::Members opts=val["options"].getMemberNames();
-		for(Json::Value::Members::iterator oIt=opts.begin();oIt!=opts.end();oIt++){
-
-			ss << "\t"<<*oIt;
-			Json::Value opval=val["options"][*oIt];
-			for(size_t i=0; i<val["options"][*oIt].size();i++){
-				ss << " "<< val["options"][*oIt][i].asString();
+
+	for(list<string>::iterator fIt=fil.begin();fIt!=fil.end();fIt++){
+		string line=StringTools::Trimmed(*fIt," \t");
+		if(line=="" or line[0]=='#'){
+			res.push_back(*fIt+"\n");
+			continue;
+		}
+		string arguments=line;
+		if(line.substr(0,7)=="config_"){
+			size_t argsep=line.find_first_of("=");
+			curif=line.substr(7,(argsep-7));
+			arguments=line.substr(argsep+1);
+		}
+		if(line.substr(0,7)=="routes_"){
+			size_t argsep=line.find_first_of("=");
+			curif=line.substr(7,(argsep-7));
+			arguments=line.substr(argsep+1);
+			isroute=true;
+		}
+		if(line.substr(0,7)=="bridge_"){
+			size_t argsep=line.find_first_of("=");
+			curif=line.substr(7,(argsep-7));
+			arguments=line.substr(argsep+1);
+			isbridge=true;
+		}
+		if(line.substr(0,6)=="brctl_"){
+			size_t argsep=line.find_first_of("=");
+			curif=line.substr(6,(argsep-6));
+			arguments=line.substr(argsep+1);
+			isbrctl=true;
+		}
+		if (curif=="") {
+			res.push_back(*fIt+"\n");
+			continue;
+		}
+//		if (!cfg.isMember(curif)) {
+		if ( (curif!="eth0") && (curif!="eth1") && (curif!="wlan0") && (curif!="br0") ) {
+			res.push_back(*fIt+"\n");
+			continue;
+		}
+		if (arguments.substr(0,1)=="\""){
+			inarg=!inarg;
+			arguments=arguments.substr(1);
+		}
+		if (inarg) {
+			if (arguments.substr(arguments.size()-1,1)=="\""){
+				inarg=!inarg;
+				arguments.resize(arguments.size()-1);
+			}else{
+				continue;
 			}
+		}
+		if (!cfg.isMember(curif)) {
+			continue;
+		}
+		if (!inarg) {
+			if (isroute) {
+				isroute=false;
+				continue;
+			} else if (isbridge) {
+				isbridge=false;
+				continue;
+			} else if (isbrctl) {
+				isbrctl=false;
+				continue;
+			} else {
+				Json::Value NIC=devs[curif]["options"];
+				int i=0;
+				if (NIC.isMember("bridge_ports")){
+					ss.str("");
+					string indent="";
+					for (size_t j=0; j<NIC["bridge_ports"].size();j++){
+						string devname = NIC["bridge_ports"][j].asString();
+						if (devname!="") {
+							res.push_back("config_"+devname+"=\"null\"\n");
+							ss << indent << devname;
+							indent=" ";
+						}
+					}
+					ss << "\"";
+					ss<<endl;
+					res.push_back("bridge_"+curif+"=\"");
+					res.push_back(ss.str());
+					res.push_back("brctl_"+curif+"=\"setfd 0\n");
+					res.push_back("sethello 10\n");
+					res.push_back("stp on\"\n");
+				}
+				if(devs[curif]["addressing"]=="dhcp"){
+					res.push_back("config_"+curif+"=\"dhcp\"\n");
+				}else{
+					if(NIC["address"][i].asString()=="0.0.0.0"){
+						res.push_back("config_"+curif+"=\"null\"\n");
+						NIC.removeMember("gateway");
+						NIC.removeMember("routes");
+					}else if(NIC["address"][i].asString()!=""){
+						struct in_addr ipaddress;
+						struct in_addr netmask;
+						inet_aton(NIC["address"][i].asString().c_str(), &ipaddress);
+						inet_aton(NIC["netmask"][i].asString().c_str(), &netmask);
+						ipaddress.s_addr |= ~(netmask.s_addr);
+						string broadcast=inet_ntoa(ipaddress);
+						res.push_back("config_"+curif+"=\""+NIC["address"][i].asString()+" netmask "+NIC["netmask"][i].asString()+" brd "+broadcast+"\"\n");
+					}
+				}
+				string gateway="";
+				string indent="";
+				if(NIC.isMember("gateway")){
+					if (NIC["gateway"][i].asString()!="0.0.0.0"){
+						gateway="default via "+NIC["gateway"][i].asString();
+						indent="\n             ";
+					}
+				}
+				if(NIC.isMember("routes")){
+					if(gateway.size()>0){
+						ss << gateway;
+					}
+					for(size_t j=0; j<NIC["routes"].size();j++){
+						ss << indent<< NIC["routes"][j].asString();
+						indent="\n             ";
+					}
+					ss<<"\""<<endl;
+					res.push_back("routes_"+curif+"=\""+ss.str());
+					ss.str("");
+					gateway="";
+				}
+				if(gateway.size()>0){
+					res.push_back("routes_"+curif+"=\""+gateway+"\"\n");
+				}
+				devs.removeMember(curif);
+			}
+			curif="";
+		}
+	}
+
+	Json::Value::Members opts=devs.getMemberNames();
+	for(Json::Value::Members::iterator oIt=opts.begin();oIt!=opts.end();oIt++){
+		Json::Value NIC=devs[*oIt]["options"];
+		int i=0;
+		if (NIC.isMember("bridge_ports")){
+			ss.str("");
+			string indent="";
+			for (size_t j=0; j<NIC["bridge_ports"].size();j++){
+				string devname = NIC["bridge_ports"][j].asString();
+				if (devname!="") {
+					res.push_back("config_"+devname+"=\"null\"\n");
+					ss << indent << devname;
+					indent=" ";
+				}
+			}
+			ss << "\"";
 			ss<<endl;
+			res.push_back("bridge_"+*oIt+"=\"");
 			res.push_back(ss.str());
-			ss.str("");
-;		}
-
-		res.push_back("\n");
+			res.push_back("brctl_"+*oIt+"=\"setfd 0\n");
+			res.push_back("sethello 10\n");
+			res.push_back("stp on\"\n");
+		}
+		if(devs[*oIt]["addressing"]=="dhcp"){
+			res.push_back("config_"+*oIt+"=\"dhcp\"\n");
+		}else{
+			if(NIC["address"][i].asString()=="0.0.0.0"){
+				res.push_back("config_"+curif+"=\"null\"\n");
+				NIC.removeMember("gateway");
+			}else{
+				struct in_addr ipaddress;
+				struct in_addr netmask;
+				inet_aton(NIC["address"][i].asString().c_str(), &ipaddress);
+				inet_aton(NIC["netmask"][i].asString().c_str(), &netmask);
+				ipaddress.s_addr |= ~(netmask.s_addr);
+				string broadcast=inet_ntoa(ipaddress);
+				res.push_back("config_"+*oIt+"=\""+NIC["address"][i].asString()+" netmask "+NIC["netmask"][i].asString()+" brd "+broadcast+"\"\n");
+			}
+		}
+		if(NIC.isMember("gateway")){
+			if (NIC["gateway"][i].asString()!="0.0.0.0"){
+				res.push_back("routes_"+*oIt+"=\"default via "+NIC["gateway"][i].asString()+"\"\n");
+			}
+		}
 	}
+
 	FileUtils::Write(IFSFILE,res,0644);
 	return true;
 }
@@ -117,6 +335,5 @@
 
 }
 
-}
-
 
+}
diff -ru a/utils/InterfacesCfg.h b/utils/InterfacesCfg.h
--- a/utils/InterfacesCfg.h	2010-06-09 15:24:26.000000000 +0200
+++ b/utils/InterfacesCfg.h	2015-11-07 16:31:42.230850762 +0100
@@ -26,7 +26,7 @@
 #define INTERFACESCFG_H_
 
 //#define IFSFILE "interfaces"
-#define IFSFILE "/etc/network/interfaces"
+#define IFSFILE "/etc/conf.d/net"
 
 #include <libeutils/json/json.h>
 
